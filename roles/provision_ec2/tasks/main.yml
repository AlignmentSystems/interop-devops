- name: Launch the new EC2 Instance
  ec2:
    region: "{{ ec2_region }}"
    instance_type: "{{ provision_ec2_type }}"
#    aws_access_key: "{{ aws_access_key }}"
#    aws_secret_key: "{{ aws_secret_key }}"
    image: "{{ image }}"
    exact_count: '{{ provision_ec2_count }}'
    vpc_subnet_id: "{{ vpc_subnet_id }}"
    #volumes: "{{ volumes }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: 30
        delete_on_terminate: true
    count_tag:
      L1Ptype: '{{ l1p_type }}'
      role: '{{ inst_role }}'
      environment: '{{ name_tag }}'
    instance_tags:
      Name: "{{ name_tag }}-{{ l1p_type }}"
      L1Ptype: "{{ l1p_type }}"
      role: "{{ inst_role }}"
      environment: "{{ name_tag }}"
    group_id: "{{ security_group_id }}"
    wait: true
    keypair: "{{ keypair }}"
    wait_timeout: 1200
  register: ec2

- name: Associate new elastic IPs with each of the instances
  ec2_eip:
#    aws_access_key: "{{ aws_access_key }}"
#    aws_secret_key: "{{ aws_secret_key }}"
    device_id: "{{ item }}"
    region: "{{ ec2_region }}"
    in_vpc: yes
    reuse_existing_ip_allowed: yes
  with_items: "{{ ec2.instance_ids }}"
  tags: eip
  register: eip

- name: Set instance names
  ec2_tag:
    region: '{{ ec2_region }}'
    resource: '{{ item.id }}'
    state: present
    tags:
      Name: '{{ name_tag }}-{{ l1p_type }}{{ item.ami_launch_index|int + 1 }}'
  with_items: '{{ ec2.tagged_instances }}'

# Save in case I need this to register the eip information
- name: Look for EC2 instances
  ec2_remote_facts:
#    aws_access_key: "{{ aws_access_key }}"
#    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ ec2_region }}"
    filters:
      'tag:environment': '{{ name_tag }}'
      'tag:L1Ptype': '{{ l1p_type }}'
      instance-state-name: running
  register: ec2instances
  delegate_to: localhost

# DNS is not yet implemented for L1P
#- name: Add instance DNS entries
#  route53:
#    command: create
#    zone: '{{ env_domain }}'
#    record: '{{ inst_role|replace("_", "-") }}-{{ item.ami_launch_index|int + 1 }}.{{ env_host }}'
#    type: A
#    ttl: 60
#    value: '{{ item.public_ip }}'
#    overwrite: yes
#  with_items: '{{ ec2.tagged_instances }}'

#- name: Tag instances with DNS entries
#  ec2_tag:
#    region: '{{ ec2_region }}'
#    resource: '{{ item.id }}'
#    state: present
#    tags:
#      dns: '{{ inst_role|replace("_", "-") }}-{{ item.ami_launch_index|int + 1 }}.{{ env_host }}'
#  with_items: '{{ ec2.tagged_instances }}'
#  tags: dns

- name: Wait for SSH to come up
  local_action:
    module: wait_for
    host: "{{ item.public_ip_address }}"
    port: 22
    state: started
  with_items: "{{ ec2instances.instances }}"


